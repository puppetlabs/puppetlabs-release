#!/bin/bash
##
## Creates .deb and .rpm packages for puppetlabs-release.
##
## Using a template for debian '.list' and rpm '.repo' files, do a mail-merge-like combination
## for each of the platforms and platform versions.
##
## Use [fpm](https://github.com/jordansissel/fpm) to construct .deb and .rpm packages for
## each one of the combinations
##
## Rather than deal with bash's limited function style, we make hearty use of global variables
## throughout, using functions only for the sake of code segmentation.
##
## Should this expand to much more than it is, moving to a more robust language might be
## called for.

script=$(basename "$0")

set -eu

# Create a rpm from a directory containing a '.repo' file.
function create_rpm {
  project_version=$(jq --raw-output .version "$project_json")
  project_release=$(jq --raw-output .release "$project_json")
  project_license=$(jq --raw-output .license "$project_json")
  project_vendor=$(jq --raw-output .vendor "$project_json")
  project_description=$(jq --raw-output .description "$project_json")
  project_url=$(jq --raw-output .homepage "$project_json")

  package_file_name=$(printf '%s-%s-%s.%s%s.noarch.rpm' \
                             "$project_name" \
                             "$project_version" \
                             "$project_release" \
                             "$os_name" \
                             "$os_version")

  conflicts=$(jq --raw-output '.conflicts[]?' "$project_json")
  conflicts_flags=
  for conflict in $conflicts; do
    conflicts_flags="$conflicts_flags --conflicts $conflict"
  done

  replaces=$(jq --raw-output '.replaces[]?' "$project_json")
  replaces_flags=
  for replace in $replaces; do
    replaces_flags="$replaces_flags --replaces $replace"
  done

  mkdir --parents "$output_directory"

  fpm --name "$project_name" --chdir "$build_directory" \
      --version "$project_version" --iteration "$project_release.$os_name$os_version" \
      --category 'System Environment/Base' \
      --description "$project_description" \
      --vendor "$project_vendor" --maintainer "$project_vendor" \
      --url "$project_url" \
      --architecture noarch --license "$project_license" \
      --rpm-digest sha256 \
      $conflicts_flags \
      $replaces_flags \
      --input-type dir \
      --output-type rpm \
      --package "$output_directory/$package_file_name" | fpm_log_format
}

# Create a deb from a directory containing a .list file
function create_deb {
  project_version=$(jq --raw-output .version "$project_json")
  project_release=$(jq --raw-output .release "$project_json")
  project_license=$(jq --raw-output .license "$project_json")
  project_vendor=$(jq --raw-output .vendor "$project_json")
  project_description=$(jq --raw-output .description "$project_json")
  project_url=$(jq --raw-output .homepage "$project_json")

  package_file_name=$(printf %s_%s-%s%s_all.deb \
                             "$project_name" \
                             "$project_version" \
                             "$project_release" \
                             "$os_name")

  conflicts=$(jq --raw-output '.conflicts[]?' "$project_json")
  conflicts_flags=
  for conflict in $conflicts; do
    conflicts_flags="$conflicts_flags --conflicts $conflict"
  done

  replaces=$(jq --raw-output '.replaces[]?' "$project_json")
  replaces_flags=
  for replace in $replaces; do
    replaces_flags="$replaces_flags --replaces $replace"
  done

  mkdir --parents "$output_directory"

  fpm --name "$project_name" --chdir "$build_directory" \
      --version "$project_version" \
      --iteration "$project_release$os_name" \
      --category 'System Environment/Base' \
      --description "$project_description" \
      --config-files /etc \
      --deb-no-default-config-files \
      --vendor "$project_vendor" \
      --maintainer "$project_vendor" \
      --url "$project_url" \
      --architecture noarch --license "$project_license" \
      $conflicts_flags \
      $replaces_flags \
      --input-type dir \
      --output-type deb \
      --package "$output_directory/$package_file_name" | fpm_log_format
}

# Make fpm output a bit easier to read, mostly for the sake of Jenkins console output.
# Sample input (but with some newlines added for readability)
#  {
#    :timestamp=>"2023-01-03T19:08:56.015826+0000",
#    :message=>"Created package",
#    :path=>"output/puppet6-nightly-release_1.0.0-22bullseye_all.deb"
#  }
# Sample output:
# [2023-01-03T19:08:56.015826+0000] Created package "output/puppet6-nightly-release_1.0.0-22bullseye_all.deb"

function fpm_log_format {
  sed --regexp-extended \
      --expression='s/^\{//' \
      --expression='s/:timestamp=>"([^"]+)"[, ]*/[\1] /' \
      --expression='s/:message=>"([^"]+)"[, ]*/\1 /' \
      --expression='s/:path=>"([^"]+)"[, ]*/"\1"/' \
      --expression='s/:level=>:warn[, ]*//'  \
      --expression='s/\}$//'
}

##
# Install GPG key files, as appropriate, into the build directory.
function install_deb_key_files {
  project_target_repo=$(jq --raw-output .target_repo "$project_json")
  install -D "$source_directory/keyring.gpg" \
      "$build_directory/etc/apt/keyrings/puppetlabs-keyring.gpg"
}

function install_rpm_key_files {
  project_target_repo=$(jq --raw-output .target_repo "$project_json")

  rpm_gpg_source_file=RPM-GPG-KEY-puppet.pub
  rpm_gpg_destination_file=RPM-GPG-KEY-$project_target_repo-release
  rpm_gpg_source_path="$source_directory/$rpm_gpg_source_file"
  rpm_gpg_destination_path="$build_directory/etc/pki/rpm-gpg/$rpm_gpg_destination_file"
  install -D "$rpm_gpg_source_path" "$rpm_gpg_destination_path"
}

##
# Install repo or list files, as appropriate, into the build directory

function install_rpm_repo_file {
  repo_file_source=$source_directory/$template_source_directory/$project_name.repo.template
  repo_file_build="$build_directory/etc/yum.repos.d/$project_name.repo"

  mkdir --parents "$(dirname "$repo_file_build")"
  sed -e "s/__OS_NAME__/$os_name/g" -e "s/__OS_VERSION__/$os_version/g" \
      "$repo_file_source" > "$repo_file_build"
}

function install_sles_repo_file {
  repo_file_source="$source_directory/$template_source_directory/$project_name.sles.template"
  repo_file_build="$build_directory/etc/zypp/repos.d/$project_name.repo"

  mkdir --parents "$(dirname "$repo_file_build")"
  sed -e "s/__OS_NAME__/$os_name/g" -e "s/__OS_VERSION__/$os_version/g" \
      "$repo_file_source" > "$repo_file_build"
}

function install_deb_list_file {
  list_file_source="$source_directory/$template_source_directory/$project_name.list.template"
  list_file_build="$build_directory/etc/apt/sources.list.d/$project_name.list"

  mkdir --parents "$(dirname "$list_file_build")"
  sed -e "s/__CODENAME__/$os_name/g" "$list_file_source" > "$list_file_build"
}

## See RE-16301 & RE-16379
function install_deb_pref_file {
  pref_file_source="$source_directory/$template_source_directory/puppet-release.pref.template"
  pref_file_build="$build_directory/etc/apt/preferences.d/puppet-release.pref"

  mkdir --parents "$(dirname "$pref_file_build")"
  cp "$pref_file_source" "$pref_file_build"
}

# Based on the package type ('rpm', 'deb' or 'sles') and the project name,
# copy static files and expand templates into the 'build' directory that fpm
# can later package.
function create_build_directory {
  package_type=$1
  want_pref_file=true

  if [[ $project_name == puppet-tools-release ]]; then
    want_pref_file=false
  fi

  case $project_name in
    puppet*-nightly*)
      template_source_directory=nightlies.puppet.com
      ;;
    puppet*-release)
      case $package_type in
        rpm|sles)
          template_source_directory=yum.puppet.com
          ;;
        deb)
          template_source_directory=apt.puppet.com
          ;;
      esac
      ;;
    *)
      echo "$script: No known template for \"$project_name\"" >&2
      exit 1
      ;;
  esac

  case $package_type in
    rpm)
      build_directory="$build_base_directory/$os_name/$os_version/$project_name"
      install_rpm_key_files
      install_rpm_repo_file
      ;;
    deb)
      build_directory="$build_base_directory/$os_name/$project_name"
      install_deb_key_files
      install_deb_list_file
      if [[ $want_pref_file == true ]]; then
        install_deb_pref_file
      fi
      ;;
    sles)
      build_directory="$build_base_directory/$os_name/$os_version/$project_name"
      install_rpm_key_files
      install_sles_repo_file
      ;;
  esac
}

# Some minimal validation checking of a project name.
function check_project {
  project_name=$1
  if [[ ! -r $source_directory/projects/$project_name.json ]]; then
    echo "$script: Error: Unknown project: \"$project_name\"" >&2
    exit 1
  fi
}

# For a project, apply all the rpm and deb configurations. Construct a build directory
# with the needed files and generate appropriate .rpm or .deb packages.
function build_project {
  project_name=$1
  project_name_minus_release=${project_name/%-release/}
  project_json=$source_directory/projects/$project_name.json

  rpms=$(jq --raw-output '.rpms[]?' "$project_json")
  debs=$(jq --raw-output '.debs[]?' "$project_json")
  sles=$(jq --raw-output '.sles[]?' "$project_json")

  for rpm in $rpms; do
    os_name=$(awk -F- '{ print $1 }' <<< "$rpm")
    os_version=$(awk -F- '{ print $2 }' <<< "$rpm")
    output_directory="$project_name/$output_base_directory/$os_name/$os_version/$project_name_minus_release/noarch"
    create_build_directory rpm
    create_rpm
  done

  for sles_thing in $sles; do
    os_name=$(awk -F- '{ print $1 }' <<< "$sles_thing")
    os_version=$(awk -F- '{ print $2 }' <<< "$sles_thing")
    output_directory="$project_name/$output_base_directory/$os_name/$os_version/$project_name_minus_release/noarch"
    create_build_directory sles
    create_rpm
  done

  for deb in $debs; do
    os_name=$deb
    output_directory="$project_name/$output_base_directory/deb/$os_name/$project_name_minus_release/noarch"
    create_build_directory deb
    create_deb
  done
}

## Main

project_name=${1:-unknown}
source_directory=source
build_base_directory=build
output_base_directory=output

if [[ $project_name == unknown ]]; then
  echo "Usage: $script <project> ..." >&2
  echo "Available projects: " >&2
  basename --suffix .json $source_directory/projects/* | sed -e 's/^/  /' >&2
  exit 1
fi

rm -rf $build_base_directory $output_base_directory

# Before doing anything, check that all the requested projects are known.
for project_name in "$@"; do
  check_project "$project_name"
done

# Now, build it.
for project_name in "$@"; do
  build_project "$project_name"
done
